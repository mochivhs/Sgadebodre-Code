// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Init
#include <Init.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_meta_InfoHud
#include <meta/InfoHud.h>
#endif
#ifndef INCLUDED_meta_data_PlayerSettings
#include <meta/data/PlayerSettings.h>
#endif
#ifndef INCLUDED_meta_data_dependency_Discord
#include <meta/data/dependency/Discord.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvent
#include <openfl/events/UncaughtErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvents
#include <openfl/events/UncaughtErrorEvents.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_IAssetCache
#include <openfl/utils/IAssetCache.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_29_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",29,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_224_onCrash,"Main","onCrash",0x46bec533,"Main.onCrash","Main.hx",224,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_101_main,"Main","main",0xed0e206e,"Main.main","Main.hx",101,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_166_framerateAdjust,"Main","framerateAdjust",0x5b6917e7,"Main.framerateAdjust","Main.hx",166,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_175_switchState,"Main","switchState",0x7691bfe8,"Main.switchState","Main.hx",175,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_192_updateFramerate,"Main","updateFramerate",0xee79802f,"Main.updateFramerate","Main.hx",192,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_205_dumpCache,"Main","dumpCache",0xbbc26819,"Main.dumpCache","Main.hx",205,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_65_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",65,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_66_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",66,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_68_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",68,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_69_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",69,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_71_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",71,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_72_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",72,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_87_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",87,0x087e5c05)

void Main_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_29_new)
HXLINE(  75)		this->skipSplash = true;
HXLINE(  74)		this->zoom = ((Float)-1);
HXLINE( 107)		super::__construct();
HXLINE( 116)		::openfl::Lib_obj::get_current()->get_loaderInfo()->uncaughtErrorEvents->addEventListener(HX_("uncaughtError",f3,98,8b,8b),this->onCrash_dyn(),null(),null(),null());
HXLINE( 126)		int stageWidth = ::openfl::Lib_obj::get_current()->stage->stageWidth;
HXLINE( 127)		int stageHeight = ::openfl::Lib_obj::get_current()->stage->stageHeight;
HXLINE( 129)		if ((this->zoom == -1)) {
HXLINE( 131)			Float ratioX = (( (Float)(stageWidth) ) / ( (Float)(::Main_obj::gameWidth) ));
HXLINE( 132)			Float ratioY = (( (Float)(stageHeight) ) / ( (Float)(::Main_obj::gameHeight) ));
HXLINE( 133)			this->zoom = ::Math_obj::min(ratioX,ratioY);
HXLINE( 134)			::Main_obj::gameWidth = ::Math_obj::ceil((( (Float)(stageWidth) ) / this->zoom));
HXLINE( 135)			::Main_obj::gameHeight = ::Math_obj::ceil((( (Float)(stageHeight) ) / this->zoom));
            		}
HXLINE( 141)		 ::flixel::FlxGame gameCreate =  ::flixel::FlxGame_obj::__alloc( HX_CTX ,::Main_obj::gameWidth,::Main_obj::gameHeight,::Main_obj::mainClassState,this->zoom,::Main_obj::framerate,::Main_obj::framerate,this->skipSplash,null());
HXLINE( 143)		this->addChild(gameCreate);
HXLINE( 150)		::meta::data::dependency::Discord_obj::initializeRPC();
HXLINE( 151)		::meta::data::dependency::Discord_obj::changePresence(HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 155)		::meta::data::PlayerSettings_obj::init();
HXLINE( 160)		this->infoCounter =  ::meta::InfoHud_obj::__alloc( HX_CTX ,10,3,16777215,true);
HXLINE( 161)		this->addChild(this->infoCounter);
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x07825a7d) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x07825a7d;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Main_obj::onCrash( ::openfl::events::UncaughtErrorEvent e){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_224_onCrash)
HXLINE( 225)		::String errMsg = HX_("",00,00,00,00);
HXLINE( 227)		::Array< ::Dynamic> callStack = ::haxe::_CallStack::CallStack_Impl__obj::exceptionStack(true);
HXLINE( 228)		::String dateNow = ::Date_obj::now()->toString();
HXLINE( 230)		dateNow = ::StringTools_obj::replace(dateNow,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00));
HXLINE( 231)		dateNow = ::StringTools_obj::replace(dateNow,HX_(":",3a,00,00,00),HX_("'",27,00,00,00));
HXLINE( 226)		::String path = (((HX_("./crash/",69,79,f9,62) + HX_("FE_",40,5a,35,00)) + dateNow) + HX_(".txt",02,3f,c0,1e));
HXLINE( 235)		{
HXLINE( 235)			int _g = 0;
HXDLIN( 235)			while((_g < callStack->length)){
HXLINE( 235)				 ::haxe::StackItem stackItem = callStack->__get(_g).StaticCast<  ::haxe::StackItem >();
HXDLIN( 235)				_g = (_g + 1);
HXLINE( 237)				if ((stackItem->_hx_getIndex() == 2)) {
HXLINE( 239)					 ::Dynamic column = stackItem->_hx_getObject(3);
HXDLIN( 239)					int line = stackItem->_hx_getInt(2);
HXDLIN( 239)					::String file = stackItem->_hx_getString(1);
HXDLIN( 239)					 ::haxe::StackItem s = stackItem->_hx_getObject(0).StaticCast<  ::haxe::StackItem >();
HXLINE( 240)					errMsg = (errMsg + (((file + HX_(" (line ",a4,24,f7,a5)) + line) + HX_(")\n",c1,23,00,00)));
            				}
            				else {
HXLINE( 242)					::Sys_obj::println(stackItem);
            				}
            			}
            		}
HXLINE( 246)		errMsg = (errMsg + ((HX_("\nUncaught Error: ",ed,bf,e1,72) + ::Std_obj::string(e->error)) + HX_("\nPlease report this error to the GitHub page: https://github.com/Yoshubs/Forever-Engine",ee,e6,b1,27)));
HXLINE( 248)		if (!(::sys::FileSystem_obj::exists(HX_("./crash/",69,79,f9,62)))) {
HXLINE( 249)			::sys::FileSystem_obj::createDirectory(HX_("./crash/",69,79,f9,62));
            		}
HXLINE( 251)		::sys::io::File_obj::saveContent(path,(errMsg + HX_("\n",0a,00,00,00)));
HXLINE( 253)		::Sys_obj::println(errMsg);
HXLINE( 254)		::Sys_obj::println((HX_("Crash dump saved in ",cf,9c,69,5d) + ::haxe::io::Path_obj::normalize(path)));
HXLINE( 256)		::String crashDialoguePath = HX_("FE-CrashDialog",a1,1c,ee,5b);
HXLINE( 259)		crashDialoguePath = (crashDialoguePath + HX_(".exe",24,dd,b4,1e));
HXLINE( 262)		if (::sys::FileSystem_obj::exists((HX_("./",41,28,00,00) + crashDialoguePath))) {
HXLINE( 264)			::Sys_obj::println((HX_("Found crash dialog: ",05,e1,18,95) + crashDialoguePath));
HXLINE( 269)			 ::sys::io::Process_obj::__alloc( HX_CTX ,crashDialoguePath,::Array_obj< ::String >::__new(1)->init(0,path),null());
            		}
            		else {
HXLINE( 273)			::Sys_obj::println(HX_("No crash dialog found! Making a simple alert instead...",cb,64,5e,20));
HXLINE( 274)			::lime::app::Application_obj::current->_hx___window->alert(errMsg,HX_("Error!",79,f7,fc,85));
            		}
HXLINE( 277)		::Sys_obj::exit(1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onCrash,(void))

int Main_obj::gameWidth;

int Main_obj::gameHeight;

::hx::Class Main_obj::mainClassState;

int Main_obj::framerate;

::String Main_obj::gameVersion;

::String Main_obj::modVersion;

::cpp::VirtualArray Main_obj::gameWeeks;

void Main_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_101_main)
HXDLIN( 101)		 ::openfl::display::MovieClip _hx_tmp = ::openfl::Lib_obj::get_current();
HXDLIN( 101)		_hx_tmp->addChild( ::Main_obj::__alloc( HX_CTX ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))

Float Main_obj::framerateAdjust(Float input){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_166_framerateAdjust)
HXDLIN( 166)		return (input * (( (Float)(60) ) / ( (Float)(::flixel::FlxG_obj::drawFramerate) )));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,framerateAdjust,return )

 ::flixel::FlxState Main_obj::lastState;

void Main_obj::switchState( ::flixel::FlxState curState, ::flixel::FlxState target){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_175_switchState)
HXLINE( 180)		::Main_obj::lastState = curState;
HXLINE( 183)		::Main_obj::mainClassState = ::Type_obj::getClass(target);
HXLINE( 186)		if (::flixel::FlxG_obj::game->_state->switchTo(target)) {
HXLINE( 186)			::flixel::FlxG_obj::game->_requestedState = target;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Main_obj,switchState,(void))

void Main_obj::updateFramerate(int newFramerate){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_192_updateFramerate)
HXDLIN( 192)		if ((newFramerate > ::flixel::FlxG_obj::updateFramerate)) {
HXLINE( 194)			::flixel::FlxG_obj::set_updateFramerate(newFramerate);
HXLINE( 195)			::flixel::FlxG_obj::set_drawFramerate(newFramerate);
            		}
            		else {
HXLINE( 199)			::flixel::FlxG_obj::set_drawFramerate(newFramerate);
HXLINE( 200)			::flixel::FlxG_obj::set_updateFramerate(newFramerate);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,updateFramerate,(void))

void Main_obj::dumpCache(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_205_dumpCache)
HXLINE( 208)		{
HXLINE( 208)			 ::Dynamic key = ::flixel::FlxG_obj::bitmap->_cache->keys();
HXDLIN( 208)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 208)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 210)				 ::flixel::graphics::FlxGraphic obj = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key1)) );
HXLINE( 211)				if (::hx::IsNotNull( obj )) {
HXLINE( 213)					::openfl::utils::IAssetCache_obj::removeBitmapData(::openfl::utils::Assets_obj::cache,key1);
HXLINE( 214)					::flixel::FlxG_obj::bitmap->_cache->remove(key1);
HXLINE( 215)					obj->destroy();
            				}
            			}
            		}
HXLINE( 218)		::openfl::utils::IAssetCache_obj::clear(::openfl::utils::Assets_obj::cache,HX_("songs",fe,36,c7,80));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,dumpCache,(void))


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

void Main_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Main);
	HX_MARK_MEMBER_NAME(zoom,"zoom");
	HX_MARK_MEMBER_NAME(skipSplash,"skipSplash");
	HX_MARK_MEMBER_NAME(infoCounter,"infoCounter");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Main_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zoom,"zoom");
	HX_VISIT_MEMBER_NAME(skipSplash,"skipSplash");
	HX_VISIT_MEMBER_NAME(infoCounter,"infoCounter");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Main_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { return ::hx::Val( zoom ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onCrash") ) { return ::hx::Val( onCrash_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"skipSplash") ) { return ::hx::Val( skipSplash ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"infoCounter") ) { return ::hx::Val( infoCounter ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gameWidth") ) { outValue = ( gameWidth ); return true; }
		if (HX_FIELD_EQ(inName,"framerate") ) { outValue = ( framerate ); return true; }
		if (HX_FIELD_EQ(inName,"gameWeeks") ) { outValue = ( gameWeeks ); return true; }
		if (HX_FIELD_EQ(inName,"lastState") ) { outValue = ( lastState ); return true; }
		if (HX_FIELD_EQ(inName,"dumpCache") ) { outValue = dumpCache_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"gameHeight") ) { outValue = ( gameHeight ); return true; }
		if (HX_FIELD_EQ(inName,"modVersion") ) { outValue = ( modVersion ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gameVersion") ) { outValue = ( gameVersion ); return true; }
		if (HX_FIELD_EQ(inName,"switchState") ) { outValue = switchState_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mainClassState") ) { outValue = ( mainClassState ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"framerateAdjust") ) { outValue = framerateAdjust_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updateFramerate") ) { outValue = updateFramerate_dyn(); return true; }
	}
	return false;
}

::hx::Val Main_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { zoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"skipSplash") ) { skipSplash=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"infoCounter") ) { infoCounter=inValue.Cast<  ::meta::InfoHud >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Main_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"gameWidth") ) { gameWidth=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"framerate") ) { framerate=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"gameWeeks") ) { gameWeeks=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
		if (HX_FIELD_EQ(inName,"lastState") ) { lastState=ioValue.Cast<  ::flixel::FlxState >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"gameHeight") ) { gameHeight=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"modVersion") ) { modVersion=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gameVersion") ) { gameVersion=ioValue.Cast< ::String >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mainClassState") ) { mainClassState=ioValue.Cast< ::hx::Class >(); return true; }
	}
	return false;
}

void Main_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zoom",13,a3,f8,50));
	outFields->push(HX_("skipSplash",46,75,9c,27));
	outFields->push(HX_("infoCounter",2e,a8,f3,3e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Main_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Main_obj,zoom),HX_("zoom",13,a3,f8,50)},
	{::hx::fsBool,(int)offsetof(Main_obj,skipSplash),HX_("skipSplash",46,75,9c,27)},
	{::hx::fsObject /*  ::meta::InfoHud */ ,(int)offsetof(Main_obj,infoCounter),HX_("infoCounter",2e,a8,f3,3e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Main_obj::gameWidth,HX_("gameWidth",b4,a4,7d,ff)},
	{::hx::fsInt,(void *) &Main_obj::gameHeight,HX_("gameHeight",79,f1,c1,44)},
	{::hx::fsObject /* ::hx::Class */ ,(void *) &Main_obj::mainClassState,HX_("mainClassState",52,c0,ac,66)},
	{::hx::fsInt,(void *) &Main_obj::framerate,HX_("framerate",8d,e5,4b,4e)},
	{::hx::fsString,(void *) &Main_obj::gameVersion,HX_("gameVersion",46,5d,a8,61)},
	{::hx::fsString,(void *) &Main_obj::modVersion,HX_("modVersion",76,34,59,f8)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(void *) &Main_obj::gameWeeks,HX_("gameWeeks",ad,84,d9,fc)},
	{::hx::fsObject /*  ::flixel::FlxState */ ,(void *) &Main_obj::lastState,HX_("lastState",db,a3,b8,d0)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_("zoom",13,a3,f8,50),
	HX_("skipSplash",46,75,9c,27),
	HX_("infoCounter",2e,a8,f3,3e),
	HX_("onCrash",48,5e,8d,e2),
	::String(null()) };

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::gameWidth,"gameWidth");
	HX_MARK_MEMBER_NAME(Main_obj::gameHeight,"gameHeight");
	HX_MARK_MEMBER_NAME(Main_obj::mainClassState,"mainClassState");
	HX_MARK_MEMBER_NAME(Main_obj::framerate,"framerate");
	HX_MARK_MEMBER_NAME(Main_obj::gameVersion,"gameVersion");
	HX_MARK_MEMBER_NAME(Main_obj::modVersion,"modVersion");
	HX_MARK_MEMBER_NAME(Main_obj::gameWeeks,"gameWeeks");
	HX_MARK_MEMBER_NAME(Main_obj::lastState,"lastState");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::gameWidth,"gameWidth");
	HX_VISIT_MEMBER_NAME(Main_obj::gameHeight,"gameHeight");
	HX_VISIT_MEMBER_NAME(Main_obj::mainClassState,"mainClassState");
	HX_VISIT_MEMBER_NAME(Main_obj::framerate,"framerate");
	HX_VISIT_MEMBER_NAME(Main_obj::gameVersion,"gameVersion");
	HX_VISIT_MEMBER_NAME(Main_obj::modVersion,"modVersion");
	HX_VISIT_MEMBER_NAME(Main_obj::gameWeeks,"gameWeeks");
	HX_VISIT_MEMBER_NAME(Main_obj::lastState,"lastState");
};

#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("gameWidth",b4,a4,7d,ff),
	HX_("gameHeight",79,f1,c1,44),
	HX_("mainClassState",52,c0,ac,66),
	HX_("framerate",8d,e5,4b,4e),
	HX_("gameVersion",46,5d,a8,61),
	HX_("modVersion",76,34,59,f8),
	HX_("gameWeeks",ad,84,d9,fc),
	HX_("main",39,38,56,48),
	HX_("framerateAdjust",fc,4d,c6,0a),
	HX_("lastState",db,a3,b8,d0),
	HX_("switchState",7d,07,8b,77),
	HX_("updateFramerate",44,b6,d6,9d),
	HX_("dumpCache",6e,30,39,db),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &Main_obj::__SetStatic;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Main_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_65_boot)
HXDLIN(  65)		gameWidth = 1280;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_66_boot)
HXDLIN(  66)		gameHeight = 720;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_68_boot)
HXDLIN(  68)		mainClassState = ::hx::ClassOf< ::Init >();
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_69_boot)
HXDLIN(  69)		framerate = 120;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_71_boot)
HXDLIN(  71)		gameVersion = HX_("0.2.4.2",7e,4c,09,19);
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_72_boot)
HXDLIN(  72)		modVersion = HX_("1.1",b4,56,25,00);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		::cpp::VirtualArray _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_87_boot)
HXLINE(  91)			int Alpha = 255;
HXDLIN(  91)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  91)			{
HXLINE(  91)				color = (color & -16711681);
HXDLIN(  91)				color = (color | 6684672);
            			}
HXDLIN(  91)			{
HXLINE(  91)				color = (color & -65281);
HXDLIN(  91)				color = (color | 13056);
            			}
HXDLIN(  91)			{
HXLINE(  91)				color = (color & -256);
HXDLIN(  91)				color = (color | 0);
            			}
HXDLIN(  91)			{
HXLINE(  91)				color = (color & 16777215);
HXDLIN(  91)				int color1;
HXDLIN(  91)				if ((Alpha > 255)) {
HXLINE(  91)					color1 = 255;
            				}
            				else {
HXLINE(  91)					if ((Alpha < 0)) {
HXLINE(  91)						color1 = 0;
            					}
            					else {
HXLINE(  91)						color1 = Alpha;
            					}
            				}
HXDLIN(  91)				color = (color | (color1 << 24));
            			}
HXLINE(  87)			return ::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Sgade",ee,11,a1,0e))->init(1,HX_("Bodre",4a,3d,1d,4a))->init(2,HX_("Erdobedags",84,61,eb,bb)))->init(1,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("sgadebodre",9c,f8,0f,44))->init(1,HX_("pisssgadebodre",b5,58,c0,78))->init(2,HX_("sgadebodre",9c,f8,0f,44)))->init(2,::cpp::VirtualArray_obj::__new(1)->init(0,color))->init(3,HX_("Sgadebodre: Stupid Bitch",4b,89,50,1f)));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_87_boot)
HXDLIN(  87)		gameWeeks = ( (::cpp::VirtualArray)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

